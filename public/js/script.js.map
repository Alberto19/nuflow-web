{"version":3,"names":[],"mappings":"","sources":["script.js"],"sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    angular.module('app', [\r\n        'ui.materialize',\r\n        'ui.router',\r\n        'ngResource',\r\n        'satellizer',\r\n        'ngFileUpload',\r\n        'ngMaterial',\r\n        'ngAnimate'\r\n        ])\r\n        .config(['$httpProvider',($httpProvider)=>{\r\n            // Add http interceptors\r\n            $httpProvider.interceptors.push('authInterceptor');\r\n        }])\r\n        .run(['$rootScope', '$state', 'authData', ($rootScope, $state, authData)=> {\r\n            // Page changed event\r\n            $rootScope.$on('$stateChangeStart', (event, next, current)=> {\r\n                let token = authData.getToken();\r\n\r\n                var regex = new RegExp(\"[^(init)]\\.[a-zA-Z]+\");\r\n                console.log(next.name.replace(regex, \"\"));\r\n\r\n                if (!token && next.name.replace(regex, next.name) == 'main.*') {\r\n                    event.preventDefault();\r\n                    $state.go('init.login');\r\n                }\r\n            });\r\n\r\n            // Global forbidden event\r\n            $rootScope.$on('forbidden', ()=> {\r\n                // Force redirect to login again\r\n                $state.go('init.login');\r\n            });\r\n        }]);\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(['$locationProvider', '$stateProvider', '$urlRouterProvider', ($locationProvider, $stateProvider, $urlRouterProvider)=> {\r\n            // Use URLs without hash\r\n            $locationProvider.html5Mode(true);\r\n\r\n            // Login routes\r\n            $stateProvider\r\n                .state({\r\n                    abstract: true,\r\n                    name:'init',\r\n                    url: '',\r\n                    templateUrl: 'views/layouts/init.html'\r\n                })\r\n            $stateProvider\r\n                .state({\r\n                    name:'init.login',\r\n                    url: '/',\r\n                    controller: 'LoginController as vm',\r\n                    templateUrl: 'views/layouts/login.html'\r\n                })\r\n                .state({\r\n                    name:'init.regiterUser',\r\n                    url: '/cadastro',\r\n                    controller: 'RegisterController as vm',\r\n                    templateUrl: 'views/layouts/register.html'\r\n                })\r\n                .state({\r\n                    name:'init.registerCompany',\r\n                    url: '/cadastroCompany',\r\n                    controller: 'RegisterCompanyController as vm',\r\n                    templateUrl: 'views/layouts/registerCompany.html'\r\n                })\r\n\r\n                // Home routes\r\n                .state('main', {\r\n                    abstract: true,\r\n                    url: '^',\r\n                    controller: 'LayoutController as vm',\r\n                    templateUrl: 'views/layouts/main.html',\r\n                })\r\n                 .state('main.feed', {\r\n                    url: '/feed',\r\n                    controller: 'FeedController as vm',\r\n                    templateUrl: 'views/partials/feed.html',\r\n                })\r\n                .state('main.place', {\r\n                    url: '/feed/:placeId',\r\n                    controller: 'FeedPlaceController as vm',\r\n                    templateUrl: 'views/partials/feedPlace.html',\r\n                })\r\n                //Rota perfil usuario\r\n                .state('main.profile', {\r\n                    url: '/profile',\r\n                    controller: 'ProfileController as vm',\r\n                    templateUrl: 'views/partials/profile.html',\r\n                })\r\n                //Rota perfil Company\r\n                .state('main.profileCompany', {\r\n                    url: '/profileCompany',\r\n                    controller: 'ProfileCompanyController as vm',\r\n                    templateUrl: 'views/partials/profileCompany.html',\r\n                })\r\n                //Rota favorito\r\n                .state('main.favorite', {\r\n                    url: '/favorite',\r\n                    controller: 'FavoriteController as vm',\r\n                    templateUrl: 'views/partials/favorite.html',\r\n                })\r\n                //rotas de evento\r\n                .state('main.event', {\r\n                    url: '^/event',\r\n                    template: '<ui-view/>',\r\n                })\r\n                .state('main.event.list',{\r\n                    url: '/list',\r\n                    controller: 'AllEventsController as vm',\r\n                    templateUrl: 'views/partials/event/allEvents.html',\r\n                })\r\n                .state('main.event.edit', {\r\n                    url: '/edit/:eventId',\r\n                    controller: 'EventEditController as vm',\r\n                    templateUrl: 'views/partials/event/editEvent.html',\r\n                })\r\n                .state('main.event.create', {\r\n                    url: '/create',\r\n                    controller: 'EventController as vm',\r\n                    templateUrl: 'views/partials/event/event.html',\r\n                })\r\n                .state('main.test', {\r\n                    url: '/test',\r\n                    controller: 'TestController as vm',\r\n                    templateUrl: 'views/partials/test.html',\r\n                })\r\n        }]);\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('config', config);\r\n\r\n    function config() {\r\n        return {\r\n            baseApiUrl: \"http://localhost:3000/api\"\r\n            // baseApiUrl: \"https://nuflow.herokuapp.com/api\"\r\n        };\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('auth', auth);\r\n\r\n    auth.$inject = ['$http', 'authData', 'config'];\r\n\r\n    function auth($http, authData, config) {\r\n        var service = {\r\n            login,\r\n            register,\r\n            getPhoto,\r\n            getById,\r\n            getPhotoCompany,\r\n            logout\r\n        };\r\n\r\n        return service;\r\n\r\n        ////////////////\r\n        function login(auth) {\r\n            return $http.post(`${config.baseApiUrl}/auth/login`, auth)\r\n                .then(result => {\r\n                        var loginData = result.data;\r\n                        authData.parseData(loginData);\r\n                        return loginData;\r\n                    },\r\n                    (error) => {\r\n                        if (error.status == 404) {\r\n                            Materialize.toast(error.data, 3000);\r\n                        }\r\n                        if (error.status == 401) {\r\n                            Materialize.toast(error.data, 3000);\r\n                        }\r\n                        return error;\r\n                    });\r\n        };\r\n\r\n        function register(user) {\r\n            return $http.post(`${config.baseApiUrl}/auth/cadastrar`, user)\r\n                .then((result) => {\r\n                    var registerData = result.data;\r\n                    authData.parseData(registerData);\r\n                    return result.data;\r\n                }, (error) => {\r\n                    return error;\r\n                });\r\n        };\r\n\r\n        function getPhoto() {\r\n            return $http.get(`${config.baseApiUrl}/auth/photo`)\r\n                .then((result) => {\r\n                    return result.data;\r\n                }, (error) => {\r\n                    return error;\r\n                });\r\n        };\r\n\r\n         function getById(id) {\r\n            return $http.post(`${config.baseApiUrl}/auth/getById`, {id})\r\n                .then((result) => {\r\n                    return result.data;\r\n                }, (error) => {\r\n                    return error;\r\n                });\r\n        };\r\n\r\n        function getPhotoCompany(id) {\r\n            return $http.post(`${config.baseApiUrl}/auth/photoCompany`, {id})\r\n                .then((result) => {\r\n                    return result.data;\r\n                }, (error) => {\r\n                    return error;\r\n                });\r\n        };\r\n\r\n        function logout() {\r\n            authData.clearData();\r\n        };\r\n    }\r\n})();\n(function () {\n\t'use strict';\n\n\tangular\n\t\t.module('app')\n\t\t.factory('authData', authData);\n\n\tauthData.$inject = [];\n\n\tfunction authData() {\n\t\t/** Cached Instances **/\n\t\tvar cachedToken = null;\n\n\t\t/* Service */\n\t\tvar service = {\n\t\t\tparseData: parseData,\n\t\t\tclearData: clearData,\n\n\t\t\tgetToken: getToken,\n\t\t\tsetToken: setToken,\n\t\t};\n\n\t\treturn service;\n\n\t\t////////////////\n\n\t\t/* Login Data */\n\t\tfunction parseData(data) {\n\t\t\tsetToken(data.token);\n\t\t}\n\n\t\tfunction clearData() {\n\t\t\tsetToken();\n\t\t}\n\n\t\t/* API Token - Value */\n\t\tfunction getToken() {\n\t\t\tif (!cachedToken) {\n\t\t\t\tvar value = localStorage.getItem('token');\n\t\t\t\tcachedToken = value ? value : null;\n\t\t\t}\n\n\t\t\treturn cachedToken;\n\t\t}\n\n\t\tfunction setToken(token) {\n\t\t\tcachedToken = token;\n\n\t\t\tif (token) {\n\t\t\t\tlocalStorage.setItem('token', token);\n\t\t\t}else{\n\t\t\tlocalStorage.removeItem('token');\n\t\t\t}\n\n\t\t}\n\t}\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .factory('authInterceptor', authInterceptor);\n\n    authInterceptor.$inject = ['$rootScope', '$q', 'authData'];\n\n    function authInterceptor($rootScope, $q, authData) {\n        var service = {\n            request: request,\n            responseError: responseError\n        };\n\n        return service;\n\n        ////////////////\n\n        function request(config) {\n            var token = authData.getToken();\n\n            // Inject API token on all requests\n            if (token) {\n                config.headers['x-access-token'] = token;\n            }\n\n            return config;\n        }\n\n        function responseError(response) {\n            // Forbidden response\n            if (response.status == 403) {\n                // Remove login data\n                authData.clearData();\n\n                // Emit global forbidden event\n                $rootScope.$emit('forbidden');\n            }\n\n            return $q.reject(response);\n        }\n    }\n})();\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('Events', Events);\r\n\r\n    Events.$inject = ['$http', 'config', 'Upload'];\r\n\r\n    function Events($http, config, Upload) {\r\n        var service = {\r\n            getById: getById,\r\n            getAll: getAll,\r\n            post: post,\r\n            put:put,\r\n            uploadBanner: uploadBanner,\r\n            getBanner: getBanner,\r\n            getAllParam: getAllParam\r\n        };\r\n\r\n        return service;\r\n\r\n        function getById(eventId) {\r\n            return $http.get(`${config.baseApiUrl}/event/${eventId}`);\r\n        };\r\n\r\n        function getAll() {\r\n            return $http.get(`${config.baseApiUrl}/event`);\r\n        };\r\n\r\n         function getAllParam(id) {\r\n            return $http.post(`${config.baseApiUrl}/event/eventParams`, { id });\r\n        };\r\n\r\n        function post(event) {\r\n            return $http.post(`${config.baseApiUrl}/event`, event);\r\n        };\r\n\r\n        function put(id, event){\r\n            return $http.put(`${config.baseApiUrl}/event`, {id, event});\r\n        };\r\n\r\n        function getBanner(eventId) {\r\n           return $http.post(`${config.baseApiUrl}/event/banner`, {banner: eventId});\r\n        };\r\n\r\n        function uploadBanner(id, banner) {\r\n            return Upload.upload({\r\n                url: `${config.baseApiUrl}/event/uploadBanner`,\r\n                data: {\r\n                    file: banner,\r\n                    id: id\r\n                }\r\n            });\r\n        };\r\n    }\r\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .factory('Favorite', Favorite);\n\n    Favorite.$inject = ['$http', 'config'];\n\n    function Favorite($http, config) {\n        var service = {\n            get: get,\n            getUser: getUser,\n            getCompany: getCompany,\n            postFavorite: postFavorite\n        };\n\n        return service;\n\n        ////////////////\n         function get() {\n            return $http.get(`${config.baseApiUrl}/favorite/`);\n        };\n\n        function getUser() {\n            return $http.get(`${config.baseApiUrl}/favorite/user`);\n        };\n\n        function getCompany() {\n            return $http.get(`${config.baseApiUrl}/favorite/company`);\n        };\n\n        function postFavorite(favorite){\n            return $http.post(`${config.baseApiUrl}/favorite/persiste`, favorite);\n        }\n    }\n})();\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('Navigation', Navigation);\r\n\r\n    Navigation.$inject = ['$http', 'config'];\r\n\r\n    function Navigation($http, config ) {\r\n        var service = {\r\n            get: get\r\n        };\r\n\r\n        return service;\r\n\r\n        ////////////////\r\n        function get() {\r\n            return $http.get(config.baseApiUrl + '/navigation');\r\n        };\r\n    }\r\n})();\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('Profile', Profile);\r\n\r\n    Profile.$inject = ['$http', 'config', 'Upload'];\r\n\r\n    function Profile($http, config, Upload) {\r\n        var service = {\r\n            getProfile: getProfile,\r\n            updateProfile: updateProfile,\r\n            uploadPhoto: uploadPhoto\r\n        };\r\n\r\n        return service;\r\n\r\n        ////////////////\r\n        function getProfile() {\r\n            return $http.get(config.baseApiUrl + '/user/profile');\r\n        };\r\n\r\n        function updateProfile(profile) {\r\n            return $http.post(`${config.baseApiUrl}/user/updateProfile`, profile);\r\n        };\r\n\r\n        function uploadPhoto(photo){\r\n            return Upload.upload({\r\n                url: `${config.baseApiUrl}/auth/uploadPhoto`,\r\n                data: { file: photo }\r\n            });\r\n        }\r\n    }\r\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .factory('ProfileCompany', ProfileCompany);\n\n    ProfileCompany.$inject = ['$http', 'config', 'Upload'];\n\n    function ProfileCompany($http, config, Upload) {\n        var service = {\n            getProfileCompany,\n            updateProfileCompany,\n            uploadPhoto,\n            sendComment\n        };\n\n        return service;\n\n        ////////////////\n        function getProfileCompany() {\n            return $http.get(config.baseApiUrl + '/company/ProfileCompany');\n        };\n\n        function updateProfileCompany(ProfileCompany) {\n            return $http.post(`${config.baseApiUrl}/company/updateProfileCompany`, ProfileCompany);\n        };\n\n        function uploadPhoto(photo){\n            return Upload.upload({\n                url: `${config.baseApiUrl}/auth/uploadPhoto`,\n                data: { file: photo }\n            });\n        }\n\n        function sendComment(id, comment, rating){\n            return $http.post(`${config.baseApiUrl}/company/comments`, {id, comment, rating});\n        };\n    }\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .factory('Search', Search);\n\n    Search.$inject = ['$http', 'config'];\n\n    function Search($http, config) {\n        var service = {\n            searchLocations: searchLocations,\n            getById: getById\n        };\n        return service;\n\n        ////////////////\n\n        function searchLocations(location){\n            return $http.post(`${config.baseApiUrl}/search/places`, location);\n        };\n\n        function getById(placeId) {\n            return $http.get(`${config.baseApiUrl}/search/places/${placeId}`);\n        }\n    }\n})();\n\n(function () {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('app')\r\n    .component('balada', {\r\n      templateUrl: 'components/html/balada.component.html',\r\n      controller: BaladaController,\r\n      bindings: {\r\n        id: '=',\r\n        name: '=',\r\n        adress: '=',\r\n        phone: '=',\r\n        rating: '=',\r\n        site: '=',\r\n        mapsUrl: '=',\r\n        days: '=',\r\n        reviews: '=',\r\n        photos: '=',\r\n        locationuser: '=',\r\n        location: '=',\r\n        description: '=',\r\n      },\r\n    }).directive('starRating', starRating);\r\n\r\n  BaladaController.$inject = ['ProfileCompany'];\r\n  function BaladaController(ProfileCompany) {\r\n    var $ctrl = this;\r\n    $ctrl.isReadonly = true;\r\n    $ctrl.distance = 0;\r\n    $ctrl.comment = null;\r\n    $ctrl.sendRating = 1;\r\n\r\n    $ctrl.sendComment = function() {\r\n      ProfileCompany.sendComment($ctrl.id, $ctrl.comment, $ctrl.sendRating)\r\n      .then(result => {\r\n        console.log(result);\r\n      });\r\n    };\r\n\r\n    function distancia() {\r\n      var R = 6371;\r\n      var dLat = ($ctrl.location[0] - $ctrl.locationuser[0]) * (Math.PI / 180);\r\n      var dLon = ($ctrl.location[1] - $ctrl.locationuser[1]) * (Math.PI / 180);\r\n      var a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos($ctrl.location[0] * (Math.PI / 180)) * Math.cos($ctrl.location[0] * (Math.PI / 180)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      var d = R * c;\r\n      $ctrl.distance = Math.floor(d);\r\n    };\r\n\r\n\r\n    ////////////////\r\n\r\n    $ctrl.$onInit = function () {\r\n      distancia();\r\n    };\r\n    $ctrl.$onChanges = function (changesObj) {};\r\n    $ctrl.$onDestory = function () {};\r\n  }\r\n\r\n  function starRating() {\r\n    return {\r\n      restrict: 'EA',\r\n      template: `<ul class=\"star-rating\" ng-class=\"{readonly: readonly}\">\r\n          <li ng-repeat=\"star in stars\" class=\"star\" ng-class=\"{filled: star.filled}\" ng-click=\"toggle($index)\">\r\n            <i class=\"material-icons\">star</i>\r\n          </li>\r\n        </ul>`,\r\n      scope: {\r\n        ratingValue: '=ngModel',\r\n        max: '=?', // optional (default is 5)\r\n        onRatingSelect: '&?',\r\n        readonly: '=?'\r\n      },\r\n      link: function (scope, element, attributes) {\r\n        if (scope.max == undefined) {\r\n          scope.max = 5;\r\n        }\r\n\r\n        function updateStars() {\r\n          scope.stars = [];\r\n          for (var i = 0; i < scope.max; i++) {\r\n            scope.stars.push({\r\n              filled: i < scope.ratingValue\r\n            });\r\n          }\r\n        };\r\n        scope.toggle = function (index) {\r\n          if (scope.readonly == undefined || scope.readonly === false) {\r\n            scope.ratingValue = index + 1;\r\n            scope.onRatingSelect = () =>({\r\n              rating: index + 1\r\n            });\r\n          }\r\n        };\r\n        scope.$watch('ratingValue', function (oldValue, newValue) {\r\n          if (newValue) {\r\n            updateStars();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }\r\n})();\n(function($) {\r\n'use strict';\r\n\tangular\r\n\t\t.module('app')\r\n\t\t.component('navigation', {\r\n\t\t\ttemplateUrl:'components/html/navigation.component.html',\r\n\t\t\tcontroller: NavigationController,\r\n\t\t\tbindings: {\r\n\t\t\t\tshow: '=',\r\n\t\t\t},\r\n\t\t});\r\n\r\n\tNavigationController.$inject = ['$state','auth','$rootScope', 'Navigation'];\r\n\tfunction NavigationController($state, auth, $rootScope, Navigation) {\r\n\t\tvar $ctrl = this;\r\n\r\n\t\t$ctrl.nav = {\r\n\t\t\tbutton: null,\r\n\t\t\tpath: '',\r\n\t\t\tprofile: null,\r\n\t\t\ticon: ''\r\n\t\t};\r\n\r\n\t\t$ctrl.user = {\r\n\t\t\tname: null,\r\n\t\t\temail: null,\r\n\t\t\tpicture: null\r\n\t\t};\r\n\t\t$ctrl.path = () => {\r\n\t\t\t$state.go(`${$ctrl.nav.path}`);\r\n\t\t};\r\n\t\t$ctrl.profile = () => {\r\n\t\t\t$state.go(`${$ctrl.nav.profile}`);\r\n\t\t};\r\n\r\n\t\t$ctrl.logout = ()=>{\r\n\t\t\tauth.logout();\r\n\t\t\t$rootScope.$emit('forbidden');\r\n\t\t};\r\n\r\n\t\tfunction getProfile() {\r\n\t\t\tauth.getPhoto().then(photo => {\r\n\t\t\t\t$ctrl.user.picture = photo;\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tfunction getNavigation(){\r\n\t\t\tNavigation.get().then(nav => {\r\n\t\t\t\t$ctrl.nav.button = nav.data.button;\r\n\t\t\t\t$ctrl.nav.path = nav.data.path;\r\n\t\t\t\t$ctrl.nav.profile = nav.data.profile;\r\n\t\t\t\t$ctrl.nav.icon = nav.data.icon;\r\n\t\t\t});\r\n\t\t}\r\n\t\t$ctrl.$onInit = function() { \r\n\t\t\tgetProfile();\r\n\t\t\tgetNavigation();\r\n\t\t};\r\n\t\t$ctrl.$onChanges = function(changesObj) {\r\n\t\t};\r\n\t\t$ctrl.$onDestory = function() { };\r\n\t}\r\n})(jQuery);\n(function () {\r\n    'use strict';\r\n    angular\r\n        .module('app')\r\n        .controller('AllEventsController', AllEventsController);\r\n\r\n    AllEventsController.$inject = ['$state', 'Events', '$q'];\r\n\r\n    function AllEventsController($state, Events, $q) {\r\n        var vm = this;\r\n        vm.events = null;\r\n\r\n        vm.post = post;\r\n        vm.delete = deleted;\r\n        getAll();\r\n\r\n        function getAll() {\r\n            Events.getAll().then(events => {\r\n               return getBanners(events.data);\r\n            }).then(dataEvents => vm.events = dataEvents);\r\n        };\r\n\r\n        function getBanners(dataEvents) {\r\n            var defer = $q.defer();\r\n            dataEvents.map(event => {\r\n                Events.getBanner(event.banner).then(banner => {\r\n                    event.banner = banner.data;\r\n                });\r\n                defer.resolve(dataEvents);\r\n            });\r\n            return defer.promise;\r\n        };\r\n\r\n        function post() {\r\n            $state.go('main.event.create');\r\n        }\r\n        \r\n        function deleted(id){\r\n            alert(id);\r\n        }\r\n    }\r\n})();\n(function () {\r\n    'use strict';\r\n    angular\r\n        .module('app')\r\n        .controller('EventController', EventController);\r\n\r\n    EventController.$inject = ['$state', 'Events', '$timeout'];\r\n\r\n    function EventController($state, Events, $timeout) {\r\n        var vm = this;\r\n        vm.event = {\r\n            name: null,\r\n            type: null,\r\n            dateEvent: new Date(),\r\n            price: null,\r\n            description: null,\r\n            artists: null,\r\n            banner: null,\r\n            checkIn: null,\r\n            file: null,\r\n            id: null,\r\n        };\r\n        vm.showEvent = true;\r\n        vm.showBanner = false;\r\n\r\n        var days = 15;\r\n        vm.date = {\r\n            month: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\r\n            monthShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\r\n            weekdaysFull: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sabado'],\r\n            weekdaysLetter: ['D', 'S', 'T', 'Q', 'QU', 'SE', 'Sab'],\r\n            disable: [false, 1, 7],\r\n            today: 'Hoje',\r\n            clear: 'Limpar',\r\n            close: 'Fechar',\r\n            minDate: (new Date(vm.event.dateEvent.getTime() - (1000 * 60 * 60 * 24 * days))).toISOString(),\r\n            maxDate: (new Date(vm.event.dateEvent.getTime() + (1000 * 60 * 60 * 24 * days))).toISOString(),\r\n        };\r\n\r\n        vm.onStart = function () {};\r\n        vm.onRender = function () {};\r\n        vm.onOpen = function () {};\r\n        vm.onClose = function () {};\r\n        vm.onSet = function () {};\r\n        vm.onStop = function () {};\r\n\r\n        vm.post = post;\r\n        vm.uploadBanner = uploadBanner;\r\n\r\n        function post() {\r\n            Events.post(vm.event).then(event => {\r\n                if (event.data.token === null) {\r\n                    $state.go('main.event');\r\n                } else {\r\n                    vm.event.id = event.data.eventId;\r\n                    vm.showEvent = false;\r\n                    vm.showBanner = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        function uploadBanner() {\r\n            Events.uploadBanner(vm.event.id, vm.event.file).then(() => {\r\n                Materialize.toast('Banner Enviado com sucesso', 3000);\r\n                $timeout($state.go('main.event.list'), 4000);\r\n            });\r\n        }\r\n    }\r\n})();\n(function () {\r\n    'use strict';\r\n    angular\r\n        .module('app')\r\n        .controller('EventEditController', EventEditController);\r\n\r\n    EventEditController.$inject = ['$state', 'Events', '$stateParams', '$timeout'];\r\n\r\n    function EventEditController($state, Events, $stateParams, $timeout) {\r\n        var vm = this;\r\n        vm.event = {\r\n            name: null,\r\n            type: null,\r\n            dateEvent: new Date(),\r\n            price: null,\r\n            description: null,\r\n            artists: null,\r\n            banner: null,\r\n            checkIn: null,\r\n            file: null,\r\n            id: null,\r\n        };\r\n\r\n        var days = 15;\r\n        vm.date = {\r\n            month: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\r\n            monthShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\r\n            weekdaysFull: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sabado'],\r\n            weekdaysLetter: ['D', 'S', 'T', 'Q', 'QU', 'SE', 'Sab'],\r\n            disable: [false, 1, 7],\r\n            today: 'Hoje',\r\n            clear: 'Limpar',\r\n            close: 'Fechar',\r\n            minDate: (new Date(vm.event.dateEvent.getTime() - (1000 * 60 * 60 * 24 * days))).toISOString(),\r\n            maxDate: (new Date(vm.event.dateEvent.getTime() + (1000 * 60 * 60 * 24 * days))).toISOString(),\r\n        };\r\n\r\n        vm.onStart = function () {};\r\n        vm.onRender = function () {};\r\n        vm.onOpen = function () {};\r\n        vm.onClose = function () {};\r\n        vm.onSet = function () {};\r\n        vm.onStop = function () {};\r\n\r\n        vm.put = put;\r\n        vm.uploadBanner = uploadBanner;\r\n\r\n        getById();\r\n\r\n        function getById() {\r\n            var eventId = $stateParams.eventId;\r\n            Events.getById(eventId).then(event => {\r\n                vm.event.name = event.data.name;\r\n                vm.event.type = event.data.type;\r\n                vm.event.dateEvent = event.data.dateEvent;\r\n                vm.event.price = event.data.price;\r\n                vm.event.description = event.data.description;\r\n                vm.event.artists = event.data.artists;\r\n                Events.getBanner(event.data.banner).then(banner => {\r\n                    vm.event.banner = banner.data;\r\n                });\r\n            });\r\n        };\r\n\r\n        function put() {\r\n            if (vm.event.banner != null) {\r\n                vm.event.banner = null;\r\n                vm.event.file = null;\r\n            }\r\n            Events.put($stateParams.eventId, vm.event).then((result) => {\r\n                    Materialize.toast('Evento Atualizado com sucesso', 3000);\r\n                    $timeout($state.go('main.event.list'), 4000);\r\n                    // getById();\r\n                },\r\n                (err) => {\r\n                    Materialize.toast(err.message, 3000);\r\n                });\r\n        };\r\n\r\n        function uploadBanner() {\r\n            Events.uploadBanner($stateParams.eventId, vm.event.file).then((eventBanner) => {\r\n                Events.getBanner(eventBanner.data).then(banner => {\r\n                    vm.event.banner = banner.data;\r\n                });\r\n                Materialize.toast('Banner Atualizado com sucesso', 3000);\r\n                $timeout($state.go('main.event.list'), 4000);\r\n            });\r\n        }\r\n    }\r\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .controller('FavoriteController', FavoriteController);\n\n    FavoriteController.$inject = ['Favorite', '$q', 'Events'];\n\n    function FavoriteController(Favorite, $q, Events) {\n        var vm = this;\n        vm.events = null;\n       \n        getAllEvents();\n\n        function get() {\n            Favorite.getUser().then(events => {\n                return getBanners(events.data);\n            }).then(dataEvents => vm.events = dataEvents);\n        };\n\n        function getBanners(dataEvents) {\n            var defer = $q.defer();\n            dataEvents.map(event => {\n                Events.getBanner(event.banner).then(banner => {\n                    event.banner = banner.data;\n                });\n                defer.resolve(dataEvents);\n            });\n            return defer.promise;\n        };\n       \n    }\n})();\n\n(function ($) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('FeedController', FeedController);\r\n\r\n    FeedController.$inject = ['$state', 'Search', 'auth', '$q', '$scope'];\r\n\r\n    function FeedController($state, Search, auth, $q, $scope) {\r\n        var vm = this;\r\n        vm.locations = null;\r\n        vm.radius = 10;\r\n        vm.distance = 0;\r\n        vm.location = null;\r\n        vm.changeRadius = function changeRadius() {\r\n            makeLocation();\r\n        }\r\n\r\n        if (navigator.geolocation) {\r\n           makeLocation();\r\n        } else {\r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        };\r\n        async function makeLocation() {\r\n            navigator.geolocation\r\n            .getCurrentPosition((position) => {\r\n                vm.location = [position.coords.latitude, position.coords.longitude];\r\n                let raio = angular.copy(vm.radius);\r\n                vm.distance = raio /= 100;\r\n                let find = {\r\n                    location: vm.location,\r\n                    radius: vm.distance,\r\n                    keyword: ''\r\n                    };\r\n                Search.searchLocations(find)\r\n                    .then((result) => {\r\n                        return getPhotoCompany(result.data);\r\n                    })\r\n                    .then(data => {\r\n                        data.map(location => {\r\n                            if(location.days.length === 7) {\r\n                                location.days = ['domingo à domingo'];\r\n                            }\r\n                        })\r\n                        vm.locations = data;\r\n                    });\r\n                function getPhotoCompany(companies){\r\n                    var defer = $q.defer();\r\n                        companies.map(company => {\r\n                            auth.getPhotoCompany(company._id)\r\n                            .then(picture => {\r\n                                company.photos[0] = picture\r\n                            });\r\n                            defer.resolve(companies);\r\n                        });\r\n                    return defer.promise;\r\n                } \r\n    });\r\n    }\r\n    }\r\n})(jQuery);\n(function ($) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('FeedPlaceController', FeedPlaceController);\r\n\r\n    FeedPlaceController.$inject = ['$stateParams', 'Search', 'auth', '$q', 'Events', 'Favorite'];\r\n\r\n    function FeedPlaceController($stateParams, Search, auth, $q, Events, Favorite ) {\r\n        var vm = this;\r\n        vm.place = null;\r\n        vm.events = null;\r\n        vm.like = like;\r\n        vm.check = false;\r\n        vm.favorite = false;\r\n        vm.checkIn = checkIn;\r\n\r\n        function checkIn(eventId) {\r\n        vm.check = !vm.check;\r\n        const data = {\r\n            companyId: $stateParams.placeId,\r\n            favorite: vm.favorite,\r\n            check: vm.check,\r\n            eventId\r\n        };\r\n        Favorite.postFavorite(data)\r\n            .then(() => {\r\n                Materialize.toast('CheckFeito', 3000);\r\n            })\r\n        }\r\n\r\n\r\n        function like(eventId){\r\n            vm.favorite = !vm.favorite;\r\n            const data = {\r\n                companyId: $stateParams.placeId,\r\n                favorite: vm.favorite,\r\n                check: vm.check,\r\n                eventId\r\n            };\r\n            Favorite.postFavorite(data)\r\n                .then(() => {\r\n                    Materialize.toast('Evento Favoritado', 3000);\r\n                })\r\n        }\r\n       \r\n\r\n        function getFavorite() {\r\n        var tes = new Promise((res, rej) => {\r\n        Favorite.get()\r\n            .then((events) => {\r\n            events.data.map(favo => {\r\n            vm.events.map(even => {\r\n                if (favo.eventId === even._id) {\r\n                    vm.check = true;\r\n                    vm.favorite = true;\r\n                    res(vm.check)\r\n                } \r\n                })\r\n            });\r\n        });\r\n        });\r\n    tes.then(() => {\r\n        console.log('a')\r\n    })\r\n    }\r\n\r\n        getById()\r\n        .then(() => getFavorite());\r\n     \r\n        function getById() {\r\n            var placeId = $stateParams.placeId;\r\n           return Search.getById(placeId)\r\n              .then(place => {\r\n                return getPhotoCompany(place.data);\r\n            })\r\n            .then(data => {\r\n                vm.place = data;\r\n                return getAllEvents();\r\n            });\r\n        \r\n        };\r\n\r\n         function getPhotoCompany(company) {\r\n            var defer = $q.defer();\r\n            auth.getPhotoCompany(company._id)\r\n                .then(picture => {\r\n                    company.photos[0] = picture;\r\n                    defer.resolve(company);\r\n                });\r\n            return defer.promise;\r\n        }\r\n\r\n\r\n        function getAllEvents() {\r\n            Events.getAllParam($stateParams.placeId).then(events => {\r\n                return getBanners(events.data);\r\n            }).then(dataEvents => {\r\n                vm.events = dataEvents\r\n            });\r\n        };\r\n\r\n        function getBanners(dataEvents) {\r\n            var defer = $q.defer();\r\n            dataEvents.map(event => {\r\n                Events.getBanner(event.banner).then(banner => {\r\n                    event.banner = banner.data;\r\n                });\r\n                defer.resolve(dataEvents);\r\n            });\r\n            return defer.promise;\r\n        };\r\n\r\n    }\r\n})(jQuery);\n(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .controller('LayoutController', LayoutController);\n\n    LayoutController.$inject = ['auth', '$state'];\n\n    function LayoutController(auth, $state) {\n        var vm = this;\n\n        vm.logout = logout;\n        vm.desejos = desejos;\n\n        function logout() {\n            auth.logout();\n            $state.go('login');\n        }\n        function desejos() {\n            $state.go('login');\n        }\n       \n    }\n})();\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$state', 'auth'];\r\n\r\n    function LoginController($state, auth) {\r\n        var vm = this;\r\n        vm.auth = {\r\n            email: null,\r\n            password: null\r\n        }\r\n\r\n        vm.login = login;\r\n        ////////////////\r\n\r\n        function login() {\r\n            auth.login(vm.auth)\r\n                .then((result) => {\r\n                    if (result.status != 401 && result.status != 404) {\r\n                        if(result.auth.type === 'user'){\r\n                            if (result.auth.completed === false) {\r\n                                $state.go('main.profile');\r\n                            } else {\r\n                                $state.go('main.feed');\r\n                            }\r\n                        }else{\r\n                             if (result.auth.completed === false) {\r\n                                $state.go('main.profileCompany');\r\n                            } else {\r\n                                $state.go('main.feed');\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n})();\n(function () {\n\t'use strict';\n\n\tangular\n\t\t.module('app')\n\t\t.controller('ProfileController', ProfileController);\n\n\tProfileController.$inject = ['$state', 'Profile', 'auth'];\n\n\tfunction ProfileController($state, Profile, auth) {\n\t\tvar vm = this;\n\t\tvm.user = {\n\t\t\t\temail: null,\n\t\t\t\tgenre: null,\n\t\t\t\tlocation: null,\n\t\t\t\tpicture: null,\n\t\t\t\tfile: null,\n\t\t\t\tage: null,\n\t\t\t\tpreference: null,\n\t\t\t\tname: null\n\t\t\t},\n\n\t\tvm.getProfile = getProfile;\n\t\tvm.updateProfile = updateProfile;\n\t\tvm.uploadPhoto = uploadPhoto;\n\n\t\tif (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\t\tvm.user.location = [position.coords.latitude, position.coords.longitude];\n\t\t\t});\n\t\t};\n\n\t\tgetProfile();\n\n\t\tfunction getProfile() {\n\t\t\tProfile.getProfile().then(user => {\n\t\t\t\tvm.user.name = user.data.name;\n\t\t\t\tvm.user.email = user.data.email;\n\t\t\t\tvm.user.genre = user.data.genre;\n\t\t\t\tvm.user.age = user.data.age;\n\t\t\t\tvm.user.preference = user.data.preference;\n\t\t\t\tauth.getPhoto().then(photo => {\n\t\t\t\t\tvm.user.picture = photo;\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tfunction updateProfile() {\n\t\t\tif (vm.user.picture != null) {\n\t\t\t\tvm.user.picture = null;\n\t\t\t\tvm.user.file = null;\n\t\t\t}\n\t\t\tProfile.updateProfile(vm.user).then(() => {\n\t\t\t\t\tMaterialize.toast('Cadastro Atualizado com sucesso', 3000);\n\t\t\t\t\t$state.go('main.feed');\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tMaterialize.toast('Erro ao Atualizar Cadastro', 3000);\n\t\t\t\t});\n\t\t};\n\n\t\tfunction uploadPhoto() {\n\t\t\tProfile.uploadPhoto(vm.user.file).then(() => {\n\t\t\t\tauth.getPhoto().then(photo => {\n\t\t\t\t\tvm.user.picture = photo;\n\t\t\t\t});\n\t\t\t\tMaterialize.toast('Imagem Atualizada com sucesso', 3000);\n\t\t\t});\n\t\t}\n\n\t}\n})();\n(function () {\n\t'use strict';\n\n\tangular\n\t\t.module('app')\n\t\t.controller('ProfileCompanyController', ProfileCompanyController);\n\n\tProfileCompanyController.$inject = ['$state', 'ProfileCompany', 'auth'];\n\n\tfunction ProfileCompanyController($state, ProfileCompany, auth) {\n\t\tvar vm = this;\n\t\tvm.company = {\n\t\t\tname: null,\n\t\t\temail: null,\n\t\t\tphotos: null,\n\t\t\tadress: null,\n\t\t\tlocation: [-23.5868979,-46.9796286],\n\t\t\trating: null,\n\t\t\tmapsUrl: null,\n\t\t\tcountry: null,\n\t\t\tuf: null,\n\t\t\treviews: null,\n\t\t\tphone: null,\n\t\t\tdays: null,\n\t\t\tdrinkPrice: null,\n\t\t\tsite: null,\n\t\t\tfile: null,\n\t\t\tpicture: null,\n\t\t\tdescription: null,\n\t\t};\n\n\t\tvm.uf = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA',\n\t\t 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN','RS','RO','RR','SC','SP','SE','TO'];\n\n\t\tvm.getProfileCompany = getProfileCompany;\n\t\tvm.updateProfileCompany = updateProfileCompany;\n\t\tvm.uploadPhoto = uploadPhoto;\n\n\t\tgetProfileCompany();\n\n\t\tfunction getProfileCompany() {\n\t\t\tProfileCompany.getProfileCompany().then(company => {\n\t\t\t\tvm.company.name = company.data.name;\n\t\t\t\tvm.company.email = company.data.email;\n\t\t\t\tvm.company.photos = company.data.photo;\n\t\t\t\tvm.company.adress = company.data.adress;\n\t\t\t\tvm.company.rating = company.data.rating;\n\t\t\t\tvm.company.mapsUrl = company.data.mapsUrl;\n\t\t\t\tvm.company.country = company.data.country;\n\t\t\t\tvm.company.uf = company.data.uf;\n\t\t\t\tvm.company.reviews = company.data.reviews;\n\t\t\t\tvm.company.phone = company.data.phone;\n\t\t\t\tvm.company.days = company.data.days;\n\t\t\t\tvm.company.drinkPrice = company.data.drinkPrice;\n\t\t\t\tvm.company.site = company.data.site;\n\t\t\t\tvm.company.description = company.data.description;\n\n\t\t\t\tauth.getPhoto().then(photo => {\n\t\t\t\t\tif (photo.status != 404) {\n\t\t\t\t\t\tvm.company.picture = photo;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tfunction updateProfileCompany() {\n\t\t\tif (vm.company.picture != null) {\n\t\t\t\tvm.company.picture = null;\n\t\t\t\tvm.company.photos = null;\n\t\t\t\tvm.company.file = null;\n\t\t\t}\n\t\t\tProfileCompany.updateProfileCompany(vm.company).then(() => {\n\t\t\t\t\tMaterialize.toast('Cadastro Atualizado com sucesso', 3000);\n\t\t\t\t\t$state.go('main.feed');\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tMaterialize.toast('Erro ao Atualizar Cadastro', 3000);\n\t\t\t\t});\n\t\t};\n\n\t\tfunction uploadPhoto() {\n\t\t\tProfileCompany.uploadPhoto(vm.company.file).then(() => {\n\t\t\t\tauth.getPhoto().then(photo => {\n\t\t\t\t\tvm.company.picture = photo;\n\t\t\t\t});\n\t\t\t\tMaterialize.toast('Imagem Atualizada com sucesso', 3000);\n\t\t\t});\n\t\t}\n\n\t}\n})();\n(function () {\r\n\t'use strict';\r\n\r\n\tangular\r\n\t\t.module('app')\r\n\t\t.controller('RegisterController', RegisterController);\r\n\r\n\tRegisterController.$inject = ['auth', '$state'];\r\n\r\n\tfunction RegisterController(auth, $state) {\r\n\t\tvar vm = this;\r\n\t\tvm.user = {\r\n\t\t\temail: null,\r\n\t\t\tpassword: null,\r\n\t\t\tgenre: null,\r\n\t\t\ttype: 'user',\r\n\t\t};\r\n\t\tvm.register = register;\r\n\r\n\t\tfunction register() {\r\n\t\t\tif (vm.user.genre === null) {\r\n\t\t\t\tvm.user.genre = 'masculino';\r\n\t\t\t}\r\n\t\t\tauth.register(vm.user)\r\n\t\t\t\t.then(result => {\r\n\t\t\t\t\tif (result.status != 500) {\r\n\t\t\t\t\t\t$state.go('main.profile');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tMaterialize.toast(result.data, 3000);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t};\r\n\t}\r\n})();\n(function () {\n\t'use strict';\n\n\tangular\n\t\t.module('app')\n\t\t.controller('RegisterCompanyController', RegisterCompanyController);\n\n\tRegisterCompanyController.$inject = ['auth', '$state'];\n\n\tfunction RegisterCompanyController(auth, $state) {\n\t\tvar vm = this;\n\t\tvm.company = {\n\t\t\temail: null,\n\t\t\tpassword: null,\n\t\t\ttype: 'company',\n\t\t};\n\t\tvm.registerCompany = registerCompany;\n\n\t\tfunction registerCompany() {\n\t\t\tauth.register(vm.company)\n\t\t\t\t.then(result => {\n\t\t\t\t\tif (result.status != 500) {\n\t\t\t\t\t\t$state.go('main.profileCompany');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tMaterialize.toast(result.data, 3000);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n\t}\n})();\n(function ($) {\n    'use strict';\n\n    angular\n        .module('app')\n        .controller('TestController', TestController);\n\n    TestController.$inject = [];\n\n    function TestController() {\n        var vm = this;\n\n\n\n    }\n})(jQuery);\n\n"],"file":"script.js"}